

Write a program which prints out all numbers between 1 and 100. When the program would print out a number exactly divisible by 4, print "Linked" instead. When it would print out a number exactly divisible by 6, print "In" instead. When it would print out a number exactly divisible by both 4 and 6, print "LinkedIn."

void printNum(int num){
    if (num % 4 == 0 && num % 6 == 0)
        print ("Likedin")
    else {
        if (num % 4 == 0)
            print("Linked");
        else if(num % 6 == 0)
            print ("In");
        else
            print("%d", num);
    }
 }






---------- begin sample log extract ----------
Jan 20 03:25:08 fakehost logrotate: ALERT exited abnormally with [1]
Jan 20 03:25:08 fakehost run-parts(/etc/cron.daily)[20447]: finished logrotate
Jan 20 03:26:21 fakehost anacron[28969]: Job 'cron.daily' terminated
Jan 20 03:26:21 fakehost anacron[28969]: Normal exit (1 job run)
Jan 20 03:30:01 fakehost CROND[31462]: (root) CMD (/usr/lib64/sa/sa1 1 1)
Jan 20 03:30:01 fakehost CROND[31461]: (root) CMD (/var/system/bin/sys-cmd -F > /dev/null 2>&1)
Jan 20 05:03:03 fakehost ntpd[3705]: synchronized to time.faux.biz, stratum 2
Jan 20 05:20:01 fakehost rsyslogd: [origin software="rsyslogd" swVersion="5.8.10" x-pid="20438" x-info="http://www.rsyslog.com"] start
Jan 20 05:22:04 fakehost cs3[31163]:  Q: ".../bin/rsync -LD ": symlink has no referent: "/var/syscmds/fakehost/runit_scripts/etc/runit/service/superImportantService/run"#012Q: ".../bin/rsync -LD ": rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6]
Jan 20 05:22:04 fakehost cs3[31163]:  I: Last 2 quoted lines were generated by "/usr/local/bin/rsync -LD --recursive --delete --password-file=/var/syscmds/modules/rsync_password /var/syscmds/fakehost syscmds@fakehost::syscmds_rsync"
Jan 20 05:22:08 fakehost cs3[31163]:  Q: ".../sbin/sv restart": ok: run: /export/service/cool-service: (pid 32323) 0s
Jan 20 05:22:08 fakehost cs3[31163]:  I: Last 1 quoted lines were generated by "/sbin/sv restart /export/service/cool-service"
Jan 20 05:22:09 fakehost cs3[31163]:  R: cs3:  The cool service on fakehost does not appear to be communicating with the cool service leader.  Automating a restart of the cool service in attempt to resolve the communication problem.
Jan 20 05:22:37 fakehost ACCT_ADD: WARNING: Manifest /var/syscmds/inputs/config-general/doit.txt has been processed already, bailing

---------- end sample log extract ----------





---------- begin sample output ----------
minute, number_of_messages
Jan 20 03:25,2
Jan 20 03:26,2
Jan 20 03:30,2
Jan 20 05:03,1
Jan 20 05:20,1
Jan 20 05:22,6
---------- end sample output ---------- 

Class Prog{
String name;
int count;
Prog(){}
Prog(String name, int count){
this.name = name;
this.count = count;
}
}

public void extractLog(){
    File f = new File("/var/foo");
    //FileInputSream fis = new FileInputStream(f);
    BufferedReader br  = new BufferedReader(new FileReader(f));
    HashMap <String, Integer>map = new HashMap<String, Integer>();
    String line = "";
    while(line = br.readLine()!=null){
        String msgs1 = line.split(" ")[0];
        String msgs2 = line.split(" ")[1];
        String msgs3 = line.split(" ")[2];
        String hr = msg3.split(":")[0];
        String min = msg3.split(":")[1];
    
        Integer val = map.get(msgs1+ " " +msgs2+ " "+ hr + ":" + min);
        if (val){
            map.put(msgs, val + 1);
        }else{
            map.put(msgs, 1);
        }
    }
    
    Iterator it = map.iterator();
    while(it.hasNext()){
        Map.entry mapEntry = (Map.entry)it.Next();
        System.out.println(mapEntry.getKey()+" ,"+mapEntry.getValue());
    }
    
}





public void extractLog(){
    File f = new File("/var/foo");
    //FileInputSream fis = new FileInputStream(f);
    BufferedReader br  = new BufferedReader(new FileReader(f));
    HashMap <String, Integer>map = new HashMap<String, Integer>();
     HashMap <String, Prog>prog = new HashMap<String, Prog>();
     
      String line = "";
    while(line = br.readLine()!=null){
        String msgs1 = line.split(" ")[0];
        String msgs2 = line.split(" ")[1];
        String msgs3 = line.split(" ")[2];
        String hr = msg3.split(":")[0];
        String min = msg3.split(":")[1];
        String progName = line.split(" ")[4];
        progName = progName.split(":")[0];
        
        STring key = msgs1+ " " +msgs2+ " "+ hr + ":" + min;
        Integer val = map.get(key);
        if (val){
            map.put(msgs, val + 1);
        }else{
            map.put(msgs, 1);
        }
        Prog p = prog.get(key);
        if (p){
            p.count ++;
            prog.put(key, p);
            
        }else{
             p.name = progName;
             p.count = 1;
              prog.put(key, p);
         }
        
}
    
    Iterator it = map.iterator();
    while(it.hasNext()){
        Map.entry mapEntry = (Map.entry)it.Next();
        System.out.println(mapEntry.getKey()+" ,"+mapEntry.getValue());
    }
    
    
    System.out.print("minute,total_count,rsyslogd,cs3,ACCT_ADD \n");
     Iterator prg = prog.iterator();
    while(prg.hasNext()){
        Map.entry mapEntry = (Map.entry)prg.Next();
        System.out.println(mapEntry.getKey()+" ,"+mapEntry.getValue();
    }
    
}



---------- begin sample output ----------
minute,total_count,rsyslogd,cs3,ACCT_ADD
Jan 20 05:20,1,1,0,0
Jan 20 05:22,6,0,5,1 
---------- end sample output ----------















Assume there is a REST API available at "http://www.linkedin.corp/api" for accessing employee information The employee information endpoint is "/employee/<id>" Each employee record you retrieve will be a JSON object with the following keys:

    'name'  refers to a String that contains the employee's first and last name
    'title' refers to a String that contains the employee's job title
    'reports' refers to an Array of Strings containing the IDs of the employee's direct reports

Write a function that will take an employee ID and print out the hierarchy of employees under that employee.

 

-----------Begin Sample Output--------------
Flynn Mackie - Senior VP of Engineering
  Wesley Thomas - VP of Design
    Randall Cosmo - Director of Design
      Brenda Plager - Senior Designer
  Nina Chiswick - VP of Engineering
    Tommy Quinn - Director of Engineering
      Jake Farmer - Frontend Manager
        Liam Freeman - Junior Code Monkey
      Sheila Dunbar - Backend Manager
        Peter Young - Senior Code Cowboy
-----------End Sample Output--------------


Employee{

String name;
String desig;
String id[];

Employee(String name, String desig, String []id){
    this.name = name;
    this.desig = desig;
    this.id = new String[id.length];
    
    for(int i = 0; i<length; i++)
        this.id[i] = id[i];
}

}

Employee getEmployeeFromJson(String id){

    JSON jsonObj = getJSONfromHttp(id);
    String name = jsonObj.getString("name");
    String title = jsonObj.getString("title");
    String reports[] = jsonObj.getString("reports");
    return (new Employee(name, title, reports));

}

initial call - printHierarchy(empid, 0);

void printHiearchy(String id, int depth){
    Enployee e = getEmployeeFromJson(id);
    for (int j = 0; j < depth ; i++)
        System.out.print(" ");
    System.out.println(e.name + " - " + e.desig);
    
    for (int i = 0; i < e.id.length ; i++ )
        printHierarchy(e.id[i], depth + 1);    
    
}








